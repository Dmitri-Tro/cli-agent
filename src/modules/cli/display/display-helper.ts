import type { BackupService } from '../../backup';
import type { CommandIntent } from '../../core/schemas/intent-schemas';
import type { PlanAnalysis } from '../planning/plan-analyzer';

/**
 * Display Helper - handles all console output and formatting
 * Provides consistent UI/UX for the CLI interface
 */
export class DisplayHelper {
  private readonly backupService: BackupService;

  constructor(backupService: BackupService) {
    this.backupService = backupService;
  }

  /**
   * Show welcome message
   */
  showWelcome(
    sessionId: string,
    workspaceDirectory: string,
    dryRunMode: boolean,
    explainMode: boolean,
    discussMode: boolean,
    planCount: number
  ): void {
    console.log('\nü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CLI Agent!');
    console.log('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∞–±–µ—Ä–∏—Ç–µ "–ø–æ–º–æ—â—å" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.');
    console.log('–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É "–≤—ã—Ö–æ–¥"\n');

    console.log(`üìä –°–µ—Å—Å–∏—è: ${sessionId}`);
    console.log(`üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${workspaceDirectory}`);
    console.log(`${dryRunMode ? 'üîç –†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞' : '‚ö° –†–µ–∂–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'}`);
    console.log(`${explainMode ? 'üß† –†–µ–∂–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω' : ''}`);
    console.log(`${discussMode ? 'üí≠ –†–µ–∂–∏–º –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π' : ''}`);
    if (dryRunMode && planCount > 0) {
      console.log(`üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: ${planCount}`);
    }
    console.log('');
  }

  /**
   * Show operation history
   */
  showHistory(): void {
    console.log('\nüìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:');
    const summary = this.backupService.getHistorySummary();

    if (summary.length === 0) {
      console.log('   –û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å');
    } else {
      summary.forEach(line => console.log(`   ${line}`));
    }

    const stats = this.backupService.getStatistics();
    console.log(
      `\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.totalOperations} –æ–ø–µ—Ä–∞—Ü–∏–π, ${stats.undoableOperations} –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å`
    );
  }

  /**
   * Show Russian help
   */
  showRussianHelp(): void {
    console.log(`
ü§ñ CLI Agent - –ü–æ–º–æ—â—å

–û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:
  —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª <–ø—É—Ç—å>           - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
  —Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É <–ø—É—Ç—å>          - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
  –∑–∞–ø–∏—à–∏ –≤ <—Ñ–∞–π–ª> <—Ç–µ–∫—Å—Ç>      - –∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
  –æ—Ç–º–µ–Ω–∏                       - –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–ø–µ—Ä–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É)
  –ø–æ–º–æ—â—å                       - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´:
  –∏—Å—Ç–æ—Ä–∏—è                      - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π
  –ø—Ä–æ—Å–º–æ—Ç—Ä / dry-run           - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ / explain         - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
  –ø–ª–∞–Ω / plan                  - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
  –≤—ã–ø–æ–ª–Ω–∏—Ç—å / go               - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  –æ—á–∏—Å—Ç–∏—Ç—å / clear             - –æ—á–∏—Å—Ç–∏—Ç—å –ø–ª–∞–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
  –≤—ã—Ö–æ–¥                        - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É

–ü–†–ò–ú–ï–†–´:
  —Å–æ–∑–¥–∞–π —Ñ–∞–π–ª readme.md
  —Å–æ–∑–¥–∞–π –ø–∞–ø–∫—É src/components
  –∑–∞–ø–∏—à–∏ –≤ config.json –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  –æ—Ç–º–µ–Ω–∏

–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
  ‚Ä¢ –í—Å–µ –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
  ‚Ä¢ –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–ø–æ –æ–¥–Ω–æ–π –∑–∞ —Ä–∞–∑)
  ‚Ä¢ –†–∞–±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
`);
  }

  /**
   * Show mode toggle message
   */
  showModeToggle(mode: 'dry-run' | 'explain', enabled: boolean, planCount?: number): void {
    if (mode === 'dry-run') {
      console.log(`${enabled ? 'üîç –í–∫–ª—é—á–µ–Ω' : '‚ö° –í—ã–∫–ª—é—á–µ–Ω'} —Ä–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞`);
      if (enabled && planCount && planCount > 0) {
        console.log(`üìã –í –ø–ª–∞–Ω–µ: ${planCount} –æ–ø–µ—Ä–∞—Ü–∏–π`);
      }
    } else {
      console.log(`${enabled ? 'üß† –í–∫–ª—é—á–µ–Ω' : '‚ö° –í—ã–∫–ª—é—á–µ–Ω'} —Ä–µ–∂–∏–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–π`);
    }
  }

  /**
   * Show plan cleared message
   */
  showPlanCleared(count: number): void {
    console.log(`üóëÔ∏è  –û—á–∏—â–µ–Ω –ø–ª–∞–Ω –∏–∑ ${count} –æ–ø–µ—Ä–∞—Ü–∏–π`);
  }

  /**
   * Show plan execution results
   */
  showPlanResults(successful: number, failed: number): void {
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${failed}`);
  }

  /**
   * Show current plan
   */
  showPlan(planSummary: string[], estimatedCost: number): void {
    if (planSummary.length === 0) {
      console.log('üìã –ü–ª–∞–Ω –ø—É—Å—Ç');
      return;
    }

    console.log(`\nüìã –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω (${planSummary.length} –æ–ø–µ—Ä–∞—Ü–∏–π):`);
    planSummary.forEach(line => {
      console.log(`   ${line}`);
    });

    console.log(`üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${estimatedCost} —Ç–æ–∫–µ–Ω–æ–≤`);
  }

  /**
   * Show detailed plan analysis with impact assessment
   */
  showDetailedPlan(analysis: PlanAnalysis): void {
    console.log(`\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∞–Ω–∞–ª–∏–∑–∞ (${analysis.totalOperations} –æ–ø–µ—Ä–∞—Ü–∏–π)`);
    
    // Show summary
    this.showPlanSummary(analysis);
    
    // Show conflicts and warnings first
    this.showConflictsAndWarnings(analysis);
    
    // Show detailed operation analysis
    this.showOperationDetails(analysis);
    
    // Show filesystem impact
    this.showFilesystemImpact(analysis);
    
    console.log('\nüí° –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–æ–º:');
    console.log('   "go" / "–≤—ã–ø–æ–ª–Ω–∏—Ç—å" - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–µ—Å—å –ø–ª–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
    console.log('   "clear" / "–æ—á–∏—Å—Ç–∏—Ç—å" - –æ—á–∏—Å—Ç–∏—Ç—å –ø–ª–∞–Ω');
    console.log('   "dry-run" / "–ø—Ä–æ—Å–º–æ—Ç—Ä" - –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
  }

  /**
   * Show plan summary statistics
   */
  private showPlanSummary(analysis: PlanAnalysis): void {
    const { summary } = analysis;
    console.log('\nüìä –°–≤–æ–¥–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:');
    
    if (summary.creates > 0) console.log(`   ‚ú® –°–æ–∑–¥–∞–Ω–∏–µ: ${summary.creates}`);
    if (summary.modifies > 0) console.log(`   ‚úèÔ∏è  –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${summary.modifies}`);
    if (summary.deletes > 0) console.log(`   üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ: ${summary.deletes}`);
    if (summary.moves > 0) console.log(`   üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: ${summary.moves}`);
    if (summary.reads > 0) console.log(`   üëÄ –ß—Ç–µ–Ω–∏–µ: ${summary.reads}`);
  }

  /**
   * Show conflicts and warnings
   */
  private showConflictsAndWarnings(analysis: PlanAnalysis): void {
    if (analysis.conflicts.length > 0) {
      console.log('\n‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã:');
      analysis.conflicts.forEach(conflict => {
        console.log(`   ‚ùå ${conflict}`);
      });
    }

    if (analysis.warnings.length > 0) {
      console.log('\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      analysis.warnings.forEach(warning => {
        console.log(`   üî∏ ${warning}`);
      });
    }
  }

  /**
   * Show detailed operation analysis
   */
  private showOperationDetails(analysis: PlanAnalysis): void {
    console.log('\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π:');
    
    analysis.operations.forEach((impact, index) => {
      console.log(`\n${index + 1}. ${this.getOperationIcon(impact.impactType)} ${impact.operation.type}`);
      console.log(`   üìç –ü—É—Ç—å: ${impact.targetPath}`);
      console.log(`   üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${impact.operation.reasoning || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
      
      if (impact.beforeState?.exists) {
        const type = impact.beforeState.isDirectory ? '–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è' : '—Ñ–∞–π–ª';
        const size = impact.beforeState.size ? ` (${this.formatFileSize(impact.beforeState.size)})` : '';
        console.log(`   üìÑ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${type}${size}`);
      } else {
        console.log(`   üìÑ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }

      if (impact.afterState) {
        const type = impact.afterState.isDirectory ? '–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è' : '—Ñ–∞–π–ª';
        const size = impact.afterState.size ? ` (${this.formatFileSize(impact.afterState.size)})` : '';
        const exists = impact.afterState.exists ? `${type}${size}` : '–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω';
        console.log(`   üéØ –ü–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${exists}`);
      }

      if (impact.affectedFiles.length > 0) {
        console.log(`   üîó –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ñ–∞–π–ª—ã: ${impact.affectedFiles.join(', ')}`);
      }
    });
  }

  /**
   * Show filesystem impact comparison
   */
  private showFilesystemImpact(analysis: PlanAnalysis): void {
    console.log('\nüå≥ –í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:');
    
    // Count changes
    let newFiles = 0;
    let modifiedFiles = 0;
    let deletedFiles = 0;

    for (const [path, afterState] of analysis.filesystemAfter) {
      const beforeState = analysis.filesystemBefore.get(path);
      
      if (!beforeState?.exists && afterState.exists) {
        newFiles++;
      } else if (beforeState?.exists && !afterState.exists) {
        deletedFiles++;
      } else if (beforeState?.exists && afterState.exists) {
        // Check if modified (simplified check)
        if (beforeState.size !== afterState.size) {
          modifiedFiles++;
        }
      }
    }

    console.log(`   ‚ú® –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${newFiles}`);
    console.log(`   ‚úèÔ∏è  –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${modifiedFiles}`);
    console.log(`   üóëÔ∏è  –£–¥–∞–ª—ë–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${deletedFiles}`);

    // Show structure preview if not too large
    if (analysis.filesystemAfter.size <= 20) {
      this.showFilesystemStructure(analysis);
    } else {
      console.log('\nüìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
  }

  /**
   * Show filesystem structure tree
   */
  private showFilesystemStructure(analysis: PlanAnalysis): void {
    console.log('\nüìÅ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:');
    
    const paths = Array.from(analysis.filesystemAfter.keys())
      .filter(path => analysis.filesystemAfter.get(path)?.exists)
      .sort();

    for (const filePath of paths) {
      const state = analysis.filesystemAfter.get(filePath);
      if (!state?.exists) continue;

      const beforeState = analysis.filesystemBefore.get(filePath);
      const isNew = !beforeState?.exists;
      const isModified = beforeState?.exists && beforeState.size !== state.size;
      
      const icon = state.isDirectory ? 'üìÅ' : 'üìÑ';
      const status = isNew ? ' ‚ú®' : isModified ? ' ‚úèÔ∏è' : '';
      const size = state.size ? ` (${this.formatFileSize(state.size)})` : '';
      
      console.log(`   ${icon} ${filePath}${size}${status}`);
    }
  }

  /**
   * Get operation type icon
   */
  private getOperationIcon(impactType: string): string {
    switch (impactType) {
      case 'create': return '‚ú®';
      case 'modify': return '‚úèÔ∏è';
      case 'delete': return 'üóëÔ∏è';
      case 'move': return 'üì¶';
      case 'read': return 'üëÄ';
      default: return 'üîß';
    }
  }

  /**
   * Format file size for display
   */
  private formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 B';
    
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
  }

  /**
   * Show explanation of AI interpretation
   */
  showExplanation(
    parseResult: { confidence?: number },
    intent: CommandIntent,
    sessionTokenUsage: { total: number }
  ): void {
    console.log('\nüß† –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:');
    console.log(`   üéØ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: ${intent.type}`);
    console.log(`   üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: ${intent.reasoning}`);

    if ('confidence' in parseResult) {
      console.log(`   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(parseResult.confidence! * 100).toFixed(1)}%`);
    }

    const estimatedTokens = this.estimateTokens(JSON.stringify(intent));
    console.log(`   üî¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: ${estimatedTokens}`);
    console.log(`   üìà –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Å–µ—Å—Å–∏—é: ${sessionTokenUsage.total} —Ç–æ–∫–µ–Ω–æ–≤`);
  }

  /**
   * Estimate token usage for operation
   */
  private estimateTokens(text: string): number {
    // Rough estimation: ~1 token per 3 characters for Russian text
    return Math.ceil(text.length / 3);
  }
}
